{"version":3,"sources":["InfoBox.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","Map","countries","casesType","center","zoom","MapContainer","TileLayer","url","attribution","length","map","country","index","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","Table","LineGraph","useState","data","setData","useEffect","fetch","then","response","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","datasets","backgroundColor","borderColor","fill","options","plugins","legend","display","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","prettyPrintStat","stat","name","value","iso2","sortedData","sort","a","b","FormControl","Select","variant","onChange","event","countryCode","target","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37f6a4ac.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport \"./Map.css\";\nimport { Circle, MapContainer, Popup, TileLayer } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 200,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 400,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 600,\n  },\n};\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {countries?.length > 0 &&\n          countries.map((country, index) => (\n            <Circle\n              center={[country.countryInfo.lat, country.countryInfo.long]}\n              fillOpacity={0.4}\n              color={casesTypeColors[casesType].hex}\n              fillColor={casesTypeColors[casesType].hex}\n              radius={\n                Math.sqrt(country[casesType]) *\n                casesTypeColors[casesType].multiplier\n              }\n            >\n              <Popup>\n                <div className=\"info-container\">\n                  <div\n                    className=\"info-flag\"\n                    style={{\n                      backgroundImage: `url(${country.countryInfo.flag})`,\n                    }}\n                  ></div>\n                  <div className=\"info-name\">{country.country}</div>\n                  <div className=\"info-confirmed\">\n                    Cases: {numeral(country.cases).format(\"0,0\")}\n                  </div>\n                  <div className=\"info-recovered\">\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\n                  </div>\n                  <div className=\"info-deaths\">\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\n                  </div>\n                </div>\n              </Popup>\n            </Circle>\n          ))}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import numeral from \"numeral\";\nimport React from \"react\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      <table>\n        <tbody>\n          {countries.map(({ country, cases }, index) => (\n            <tr key={index}>\n              <td>{country}</td>\n              <td>\n                <strong>{numeral(cases).format('0,0')}</strong>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport './LineGraph.css';\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType) => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let date in data[casesType]) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n      .then((response) => response.json())\n      .then((data) => {\n        const chartData = buildChartData(data, casesType);\n        setData(chartData);\n      });\n  }, [casesType]);\n\n  return (\n    <div className=\"line-graph\">\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                fill: true,\n                data: data,\n              },\n            ],\n          }}\n          options={{\n            plugins: {\n              legend: {\n                display: false,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n  const onCountryChange = (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => setCountryInfo(data));\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = data.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID 19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem value={country.value} key={index}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new cases</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}